// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mitrich772/go-order-service/internal/database (interfaces: Database)

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	database "github.com/mitrich772/go-order-service/internal/database"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// GetAllOrders mocks base method.
func (m *MockDatabase) GetAllOrders() ([]database.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].([]database.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockDatabaseMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockDatabase)(nil).GetAllOrders))
}

// GetLastNOrders mocks base method.
func (m *MockDatabase) GetLastNOrders(arg0 int) ([]database.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastNOrders", arg0)
	ret0, _ := ret[0].([]database.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastNOrders indicates an expected call of GetLastNOrders.
func (mr *MockDatabaseMockRecorder) GetLastNOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastNOrders", reflect.TypeOf((*MockDatabase)(nil).GetLastNOrders), arg0)
}

// GetOrder mocks base method.
func (m *MockDatabase) GetOrder(arg0 string) (*database.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0)
	ret0, _ := ret[0].(*database.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockDatabaseMockRecorder) GetOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockDatabase)(nil).GetOrder), arg0)
}

// SaveOrder mocks base method.
func (m *MockDatabase) SaveOrder(arg0 *database.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockDatabaseMockRecorder) SaveOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockDatabase)(nil).SaveOrder), arg0)
}
